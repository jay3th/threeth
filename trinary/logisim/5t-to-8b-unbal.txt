v2.0 raw
# convert binary coded trinary to binary
# this will work for balanced trinary and unbalanced trinary
# when used to generate addresses or paterns to store in memory.
# This doesn't preserve the order of balanced trinary.
#
# 5 trits to 8 bits
# (defun t-do-4 (i)
#   (insert (format "%02x %02x %02x %02x\n" i (+ 1 i) (+ 2 i) i)))
# 
# (defun t-do-16 (i)
#   (t-do-4 (+  0 i))
#   (t-do-4 (+  3 i))
#   (t-do-4 (+  6 i))
#   (t-do-4 (+  0 i)))
# 
# (defun t-do-64 (i)
#   (t-do-16 (+  0 i))
#   (t-do-16 (+  9 i))
#   (t-do-16 (+ 18 i))
#   (t-do-16 (+  0 i)))
# 
# (defun t-do-256 (i)
#   (t-do-64 (+  0 i))
#   (t-do-64 (+ 27 i))
#   (t-do-64 (+ 54 i))
#   (t-do-64 (+  0 i)))
# 
# (defun t-do-1024 (i)
#   (t-do-256 (+   0 i))
#   (t-do-256 (+  81 i))
#   (t-do-256 (+ 162 i))
#   (t-do-256 (+   0 i)))
# 
# (t-do-1024 0)
00 01 02 00
03 04 05 03
06 07 08 06
00 01 02 00
09 0a 0b 09
0c 0d 0e 0c
0f 10 11 0f
09 0a 0b 09
12 13 14 12
15 16 17 15
18 19 1a 18
12 13 14 12
00 01 02 00
03 04 05 03
06 07 08 06
00 01 02 00
1b 1c 1d 1b
1e 1f 20 1e
21 22 23 21
1b 1c 1d 1b
24 25 26 24
27 28 29 27
2a 2b 2c 2a
24 25 26 24
2d 2e 2f 2d
30 31 32 30
33 34 35 33
2d 2e 2f 2d
1b 1c 1d 1b
1e 1f 20 1e
21 22 23 21
1b 1c 1d 1b
36 37 38 36
39 3a 3b 39
3c 3d 3e 3c
36 37 38 36
3f 40 41 3f
42 43 44 42
45 46 47 45
3f 40 41 3f
48 49 4a 48
4b 4c 4d 4b
4e 4f 50 4e
48 49 4a 48
36 37 38 36
39 3a 3b 39
3c 3d 3e 3c
36 37 38 36
00 01 02 00
03 04 05 03
06 07 08 06
00 01 02 00
09 0a 0b 09
0c 0d 0e 0c
0f 10 11 0f
09 0a 0b 09
12 13 14 12
15 16 17 15
18 19 1a 18
12 13 14 12
00 01 02 00
03 04 05 03
06 07 08 06
00 01 02 00
51 52 53 51
54 55 56 54
57 58 59 57
51 52 53 51
5a 5b 5c 5a
5d 5e 5f 5d
60 61 62 60
5a 5b 5c 5a
63 64 65 63
66 67 68 66
69 6a 6b 69
63 64 65 63
51 52 53 51
54 55 56 54
57 58 59 57
51 52 53 51
6c 6d 6e 6c
6f 70 71 6f
72 73 74 72
6c 6d 6e 6c
75 76 77 75
78 79 7a 78
7b 7c 7d 7b
75 76 77 75
7e 7f 80 7e
81 82 83 81
84 85 86 84
7e 7f 80 7e
6c 6d 6e 6c
6f 70 71 6f
72 73 74 72
6c 6d 6e 6c
87 88 89 87
8a 8b 8c 8a
8d 8e 8f 8d
87 88 89 87
90 91 92 90
93 94 95 93
96 97 98 96
90 91 92 90
99 9a 9b 99
9c 9d 9e 9c
9f a0 a1 9f
99 9a 9b 99
87 88 89 87
8a 8b 8c 8a
8d 8e 8f 8d
87 88 89 87
51 52 53 51
54 55 56 54
57 58 59 57
51 52 53 51
5a 5b 5c 5a
5d 5e 5f 5d
60 61 62 60
5a 5b 5c 5a
63 64 65 63
66 67 68 66
69 6a 6b 69
63 64 65 63
51 52 53 51
54 55 56 54
57 58 59 57
51 52 53 51
a2 a3 a4 a2
a5 a6 a7 a5
a8 a9 aa a8
a2 a3 a4 a2
ab ac ad ab
ae af b0 ae
b1 b2 b3 b1
ab ac ad ab
b4 b5 b6 b4
b7 b8 b9 b7
ba bb bc ba
b4 b5 b6 b4
a2 a3 a4 a2
a5 a6 a7 a5
a8 a9 aa a8
a2 a3 a4 a2
bd be bf bd
c0 c1 c2 c0
c3 c4 c5 c3
bd be bf bd
c6 c7 c8 c6
c9 ca cb c9
cc cd ce cc
c6 c7 c8 c6
cf d0 d1 cf
d2 d3 d4 d2
d5 d6 d7 d5
cf d0 d1 cf
bd be bf bd
c0 c1 c2 c0
c3 c4 c5 c3
bd be bf bd
d8 d9 da d8
db dc dd db
de df e0 de
d8 d9 da d8
e1 e2 e3 e1
e4 e5 e6 e4
e7 e8 e9 e7
e1 e2 e3 e1
ea eb ec ea
ed ee ef ed
f0 f1 f2 f0
ea eb ec ea
d8 d9 da d8
db dc dd db
de df e0 de
d8 d9 da d8
a2 a3 a4 a2
a5 a6 a7 a5
a8 a9 aa a8
a2 a3 a4 a2
ab ac ad ab
ae af b0 ae
b1 b2 b3 b1
ab ac ad ab
b4 b5 b6 b4
b7 b8 b9 b7
ba bb bc ba
b4 b5 b6 b4
a2 a3 a4 a2
a5 a6 a7 a5
a8 a9 aa a8
a2 a3 a4 a2
00 01 02 00
03 04 05 03
06 07 08 06
00 01 02 00
09 0a 0b 09
0c 0d 0e 0c
0f 10 11 0f
09 0a 0b 09
12 13 14 12
15 16 17 15
18 19 1a 18
12 13 14 12
00 01 02 00
03 04 05 03
06 07 08 06
00 01 02 00
1b 1c 1d 1b
1e 1f 20 1e
21 22 23 21
1b 1c 1d 1b
24 25 26 24
27 28 29 27
2a 2b 2c 2a
24 25 26 24
2d 2e 2f 2d
30 31 32 30
33 34 35 33
2d 2e 2f 2d
1b 1c 1d 1b
1e 1f 20 1e
21 22 23 21
1b 1c 1d 1b
36 37 38 36
39 3a 3b 39
3c 3d 3e 3c
36 37 38 36
3f 40 41 3f
42 43 44 42
45 46 47 45
3f 40 41 3f
48 49 4a 48
4b 4c 4d 4b
4e 4f 50 4e
48 49 4a 48
36 37 38 36
39 3a 3b 39
3c 3d 3e 3c
36 37 38 36
00 01 02 00
03 04 05 03
06 07 08 06
00 01 02 00
09 0a 0b 09
0c 0d 0e 0c
0f 10 11 0f
09 0a 0b 09
12 13 14 12
15 16 17 15
18 19 1a 18
12 13 14 12
00 01 02 00
03 04 05 03
06 07 08 06
00 01 02 00
